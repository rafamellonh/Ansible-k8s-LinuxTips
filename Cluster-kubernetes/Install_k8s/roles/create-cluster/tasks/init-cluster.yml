# ============================================================
#  INSTALAÇÃO DE PACOTES BÁSICOS NECESSÁRIOS
# ============================================================

- name: Ensure required packages are installed
  ansible.builtin.apt:
    name:
      - apt-transport-https      # suporte HTTPS para repositórios apt
      - ca-certificates          # certificados raiz confiáveis
      - curl                     # ferramenta para transferir dados
      - gnupg                    # manipulação de chaves GPG
      - lsb-release              # informações da versão do Ubuntu
    state: present
    update_cache: yes

# ============================================================
#  ADIÇÃO DA CHAVE GPG DO DOCKER
# ============================================================
- name: add gpg
  ansible.builtin.shell:
    cmd: "curl -fssl https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg"
  args:
    creates: /usr/share/keyrings/docker-archive-keyring.gpg   # evita recriar se já existir


# ============================================================
#  ADIÇÃO DO REPOSITÓRIO DO DOCKER
# ============================================================
- name: add docker repo
  ansible.builtin.shell: 
    cmd: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  args:
    creates: /etc/apt/sources.list.d/docker.list   # ✅ só roda se o arquivo ainda não existir

# ============================================================
#  INSTALAÇÃO E CONFIGURAÇÃO DO CONTAINERD
# ============================================================
- name: install containerd
  ansible.builtin.apt:
    name: containerd.io
    state: present
    update_cache: yes    

- name: configure containerd
  ansible.builtin.shell:
    cmd: |
      containerd config default | sudo tee /etc/containerd/config.toml
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
      systemctl restart containerd


# ============================================================
#  HABILITAÇÃO DO SERVIÇO KUBELET
# ============================================================
- name: enable kubelet
  ansible.builtin.command: systemctl enable --now kubelet


# ============================================================
#  REINICIALIZAÇÃO DO CLUSTER K8S (CASO JÁ EXISTENTE)
# ============================================================
- name: reset cluster
  command: kubeadm reset --force
  register: kubeadmin_init
  #when: force_run | default(false)

# ============================================================
#  INICIALIZAÇÃO DO CLUSTER MESTRE E CrIAÇÃO DO TOKEN
# ============================================================
- name: init cluster
  shell: sudo kubeadm init --pod-network-cidr=10.10.0.0/16 --apiserver-advertise-address=192.168.1.4
  args:
    creates: /etc/kubernetes/admin.conf   # evita rodar novamente se já inicializado
  register: kubeadmin_result
  
- name: Create fresh join token
  command: kubeadm token create
  register: kubeadm_token
  changed_when: true
  
- name: Compute CA cert hash
  shell: |
        openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
        | openssl rsa -pubin -outform der 2>/dev/null \
        | openssl dgst -sha256 -hex | awk '{print $2}'
  register: kubeadm_hash
  changed_when: false

- name: Publish tokem/hasn for worker nodes
  add_host:
    name: k8s_token_holder
    token: "{{ kubeadm_token.stdout | trim}}"
    hash:  "{{ kubeadm_hash.stdout | trim}}"
  run_once: true
  delegate_to: localhost


# ============================================================
#  show token
# ============================================================
- name: Show token and hash
  debug: 
    msg: "token={{ hostvars['k8s_token_holder'].token }} hash={{ hostvars['k8s_token_holder'].hash }}"
  run_once: true
  delegate_to: localhost
    


# ============================================================
#  CONFIGURAÇÃO DO KUBECTL PARA O USUÁRIO ROOT
# ============================================================
- name: create .kube dir
  shell: |
    mkdir -p /root/.kube
    cp -f /etc/kubernetes/admin.conf /root/.kube/config
    chown $(id -u):$(id -g) /root/.kube/config
  args:
    creates: /root/.kube/config
    # as duas linhas abaixo são exemplos alternativos
    #sudo cp -i /etc/kubernetes/admin.conf $home/.kube/config
    #sudo chown $(id -u):$(id -g) $home/.kube/config


# ============================================================
#  INSTALAÇÃO DO PLUGIN DE REDE (WEAVE NET)
# ============================================================
- name: install weave net
  shell: |
    kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
  #args:
  #  creates: /etc/cni/net.d/10-weave.conflist   # impede reaplicar se já instalado

 
# ============================================================
#  VERIFICA SE OS NÓS ESTÃO NO CLUSTER
# ============================================================
- name: tmp
  ansible.builtin.command: kubectl get nodes
  register: result

- name: show result
  ansible.builtin.debug:
    var: result.stdout_lines

 