# ======================================================
# PREPARAÇÃO DO SISTEMA (pacotes básicos e swap)
# ======================================================

# Desativa o swap imediatamente (K8s requer swap off)
- name: Disable swap now
  ansible.builtin.command: swapoff -a
  changed_when: false  # idempotência

# Comenta entradas de swap no fstab (desativa após reboot)
- name: Disable swap persistently (fstab)
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: "(^.*\\s+swap\\s+.*$)"
    replace: '# \1'

# ======================================================
# MÓDULOS DO KERNEL (overlay/br_netfilter)
# ======================================================

# Garante arquivo de módulos do K8s (carregados no boot)
- name: Ensure k8s modules file exists
  ansible.builtin.file:
    path: /etc/modules-load.d/k8s.conf
    state: touch
    mode: "0644"

# Coloca APENAS os nomes dos módulos (sem 'modprobe' aqui)
- name: Ensure overlay & br_netfilter are listed
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: "{{ item }}"
    create: yes
  loop:
    - overlay
    - br_netfilter

# Carrega módulos agora (efeito imediato sem reboot)
- name: Load kernel modules now
  ansible.builtin.command: "modprobe {{ item }}"
  loop:
    - overlay
    - br_netfilter
  changed_when: false

# ======================================================
# SYSCTL (rede/forward/bridge)
# ======================================================

# Ajusta parâmetros para tráfego via bridge e forward IPv4
- name: Configure parameters for networking
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    mode: "0644"
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1

# Recarrega todos os *.conf do sysctl
- name: Reload sysctl
  ansible.builtin.command: sysctl --system
  changed_when: false

# ======================================================
# DEPENDÊNCIAS APT (HTTPS, chaves, keyrings)
# ======================================================

# Pacotes base para repositórios HTTPS e GPG
- name: Ensure deps for apt over HTTPS
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes

# Diretório padrão para keyrings (modelo moderno do apt)
- name: Ensure /etc/apt/keyrings exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"

# ======================================================
# REPOSITÓRIOS: KUBERNETES (pkgs.k8s.io)
# ======================================================

# Baixa e dearmor a chave do repositório do K8s
- name: Add GPG key for Kubernetes
  ansible.builtin.shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key \
    | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    chmod a+r /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg  # evita repetir

# Adiciona o repo do K8s apontando para o keyring
- name: Add Kubernetes apt repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
    filename: kubernetes
    state: present

# ======================================================
# REPOSITÓRIOS: DOCKER/CONTAINERD
# ======================================================

# Baixa a chave ASCII oficial do Docker (.asc) e garante leitura pelo _apt
- name: Add Docker ASCII key (.asc)
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: "0644"

# Adiciona o repo Docker com signed-by apontando para .asc
- name: Add Docker apt repository (Ubuntu 24.04 amd64)
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename | default('noble') }} stable"
    filename: docker
    state: present

# Atualiza cache após adicionar os repositórios
- name: Update apt cache after adding repos 
  ansible.builtin.apt:
    update_cache: yes

# ======================================================
# RUNTIME CONTAINERD + COMPONENTES K8S
# ======================================================

# Instala containerd a partir do repo Docker
- name: Install containerd
  ansible.builtin.apt:
    name: containerd.io
    state: present

# Gera config padrão, ativa cgroups via systemd e reinicia
- name: Configure containerd
  ansible.builtin.shell: |
    containerd config default | tee /etc/containerd/config.toml
    sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
    systemctl restart containerd

# Instala kubelet/kubeadm/kubectl do repo K8s
- name: Install Kubernetes components
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

# Congela versões para evitar upgrades inesperados
- name: Mark all k8s packages to hold
  ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
  changed_when: false

# ======================================================
# FIREWALL (UFW) — PORTAS DO CONTROL PLANE
# ======================================================

# Instala o UFW (se preferir, pode usar nftables/iptables direto)
- name: Install UFW
  ansible.builtin.apt:
    name: ufw
    state: present

# Habilita UFW com política padrão "allow" (cautela em produção)
- name: Enable UFW (default allow)  # cuidado: já abriu 22 antes
  community.general.ufw:
    state: enabled
    policy: allow

# Garante SSH aberto para não perder acesso
- name: Allow SSH
  community.general.ufw:
    rule: allow
    port: "22"

# Abre portas necessárias para control-plane e Weave Net
# 6443: API server | 2379-2380: etcd | 10250/10251/10252/10255: componentes k8s
# 6783-6784: Weave Net (TCP/UDP)
- name: Open Kubernetes control-plane ports
  ansible.builtin.shell: |
    ufw allow 6443/tcp
    ufw allow 2379:2380/tcp
    ufw allow 10250/tcp
    ufw allow 10251/tcp
    ufw allow 10252/tcp
    ufw allow 10255/tcp
    ufw allow 6783/tcp
    ufw allow 6783/udp
    ufw allow 6784/udp
    ufw --force enable

