---
- name: Create Public ip
  delegate_to: localhost
  azure.azcollection.azure_rm_publicipaddress:
    resource_group: "{{ resource_group }}"
    allocation_method: Static
    name: "pip_instance_{{ item }}"
    location: "{{ location }}"
  loop: "{{ vm_ids }}"
  
# Ler o recurso de Public IP para obter o endereço
- name: Get Public IP info
  delegate_to: localhost
  azure.azcollection.azure_rm_publicipaddress_info:
    resource_group: "{{ resource_group }}"
    name: "pip_instance_{{ item }}"
    #name: "public_ip_instance_{{ item }}"
  register: pip_results
  loop: "{{ vm_ids }}"

- name: Create Network Interface for instane 01
  delegate_to: localhost
  azure.azcollection.azure_rm_networkinterface:
    resource_group: "{{ resource_group }}"
    name: "nic_instance{{ item }}"
    virtual_network: "{{ vnet_name }}"
    subnet: "{{ subnet_name }}"
    security_group: "{{ nsg_name }}"
    location: "{{ location }}"
    ip_configurations:
      - name: "ipconfig_{{ item }}"
        public_ip_address_name: "pip_instance_{{ item }}"
        private_ip_allocation_method: Dynamic
  loop: "{{ vm_ids }}"

# Ler o recurso de Network Interface para obter o endereço privado
- name: Get NIC info
  delegate_to: localhost
  azure.azcollection.azure_rm_networkinterface_info:
    resource_group: "{{ resource_group }}"
    name: "nic_instance_{{ item }}"
  register: nic_results
  loop: "{{ vm_ids }}"

- name: Create Instance 01
  delegate_to: localhost
  azure.azcollection.azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "instance-{{ item }}"
    vm_size: "{{ size_instances }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ admin_password }}"
    network_interfaces: "nic_instance{{ item }}" 
    image:
      offer: "{{ os_image_offer }}"
      publisher: "{{ os_image_publisher }}"
      sku: "{{ os_image_sku }}"
      version: latest
    managed_disk_type: "{{ managed_disk_type }}"
    os_disk_caching: ReadWrite
    os_disk_size_gb: 64
    state: present
    location: "{{ location }}"  
  register: vm_result
  loop: "{{ vm_ids }}"
    

- name: add instance to inventory
  add_host:
    name: "instance_{{ item }}"
    ansible_host: "{{ item.publicipaddresses[0].ip_address }}"
    ansible_user: "{{ admin_user }}"
    groups: kubernetes
  loop: "{{ pip_results.results }}"
  
- name: Adicionando o ip publico da vm no arquivo hosts
  delegate_to: localhost
  become: true
  lineinfile:
    path: "{{ playbook_dir }}/hosts"
    insertafter: "[kubernetes]" 
    regexp: '^instance_{{ item.item }}\s'
    line: "instance_{{ item.item }} ansible_host={{ item.publicipaddresses[0].ip_address }} ansible_user={{ admin_user }}"
  loop: "{{ pip_results.results }}"
  loop_control:
    label: "instance_{{ item.item }} => {{ (item.publicipaddresses | first).ip_address }}"
 # unsafe_writes: yes

#- name: Adicionando o ip privado da vm no arquivo hosts
 # delegate_to: localhost
  #become: true
  #lineinfile:
  #  path: "{{ playbook_dir }}/hosts"
   # insertafter: "[kubernetes]" 
    #regexp: '^{{ vm_01 }}\s'
    #line: "{{ vm_01  }} ansible_host={{ vm_private_ip }} ansible_user={{ admin_user }} ansible_ssh_pass={{ admin_password }} ansible_python_interpreter=/usr/bin/python3" 