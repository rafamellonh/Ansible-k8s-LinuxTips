---
- hosts: all
  become: yes
  gather_facts: no
  tasks:

  - name: Install apps
    ansible.builtin.apt:
      name: "{{ apps_to_install }}"
      state: present
    vars:
      apps_to_install:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
      apt:
        update_cache: yes


  - name: Add GPG
    ansible.builtin.shell:
      cmd: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg"
    args:
      creates: /usr/share/keyrings/docker-archive-keyring.gpg

  - name: Add Docker repo
    ansible.builtin.shell: 
      cmd: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  - name: Install containerd
    ansible.builtin.apt:
      name: containerd.io
      state: present
      update_cache: yes    
    
  - name: Configure containerd
    ansible.builtin.shell:
      cmd: |
        containerd config default | sudo tee /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
        systemctl restart containerd

<<<<<<< HEAD:tmp02.yml
  - name: Mark all k8s packages to hold
    ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl

  - name: Install firewall
    ansible.builtin.apt:
      name: ufw
      state: present
      update_cache: yes

  - name: Enable UFW
    community.general.ufw:
      state: enabled
      policy: allow

  - name: Enable port 22
    community.general.ufw:
      rule: allow
      port: 22
    
  - name: Configure firewall with shell
    ansible.builtin.shell: |
      ufw allow 6443/tcp
      ufw allow 2379:2380/tcp
      ufw allow 10250/tcp
      ufw allow 10251/tcp
      ufw allow 10252/tcp
      ufw allow 10255/tcp
      ufw allow 6783/tcp
      ufw allow 6783/udp
      ufw allow 6784/udp
      ufw --force enable


=======
  - name: Enable Kubelet
    ansible.builtin.command: systemctl enable --now kubelet
 
  - name: Init Cluster
    shell: sudo kubeadm init --pod-network-cidr=10.10.0.0/16 --apiserver-advertise-address=192.168.40.218
    args:
      creates: /etc/kubernetes/admin.conf   # evita rodar de novo se jÃ¡ inicializado

  - name: Create .kube dir
    shell: |
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config

  - name: Install Weave Net
    shell: |
      kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
    args:
      creates: /etc/cni/net.d/10-weave.conflist
    
  - name: Clsuter Token
    shell: kubeadm token list | cut -d ' ' -f1 | sed -n '2p'
    register: K8S_TOKEN

  - name: CA hash
    shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
    register: K8S_MASTER_CA_HASH

  - name: debug
    debug:
      msg: "K8S_TOKEN={{ K8S_TOKEN.stdout }} K8S_MASTER_CA_HASH={{ K8S_MASTER_CA_HASH.stdout }}"

  - name: tmp
    ansible.builtin.command: kubectl get nodes
    register: result
  
  - name: Show result
    ansible.builtin.debug:
      var: result.stdout_lines
>>>>>>> 48096062cc11894725cc9a4d80d80cfdefb4ac35:Cluster-kubernetes/tmp.yml
